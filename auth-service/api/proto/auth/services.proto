syntax = "proto3";

package auth_service.api;
option go_package = "github.com/BobrePatre/messenger-homework/auth-service/pkg/api/grpc/golang/auth";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "auth/messages.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080",
  info: {
    title: "Auth Api",
    version: "v1.0.0",
    contact: {
      name: "My github"
      url: "https://github.com/BobrePatre"
    }
  };
};

service AuthService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "Authentication"
    description: "Эндпоинты для аутентефикации пользователей"
  };

  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/login",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Login"
      description: "Вход в систему с уже существующем аккаунтом"
    };
  };
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/register",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Register"
      description: "Регистрация нового пользователя"
    };
  };
  rpc JWKS(google.protobuf.Empty) returns (JwkKeysResponse) {
    option (google.api.http) = {
      post: "/jwks",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Jwks"
      description: "Отдает jwk ключи"
    };
  };
}
