syntax = "proto3";

package probes.api;
option go_package = "github.com/BobrePatre/messenger-homework/auth-service/pkg/api/grpc/golang/probes";


import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080",
  base_path: "/"
  info: {
    title: "Probes Api",
    version: "v1.0.0",
    contact: {
      name: "My github"
      url: "https://github.com/BobrePatre"
    }
  };
};


service ProbeService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "Probes",
    description: "Эндпоинты для проверки состояния сервиса"
  };
  rpc Healthz(google.protobuf.Empty) returns (ProbeResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Health Probe",
      description: "Проба жизни сервиса"
    };
    option (google.api.http) = {
      get: "/healthz"
    };
  };
  rpc Readyz(google.protobuf.Empty) returns (ProbeResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Ready Probe",
      description: "Проба готовности сервиса начать принятие трафика"
    };
    option (google.api.http) = {
      get: "/readyz"
    };
  };
}

message ProbeResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Probe Response"
    }
  };
  Status status = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "Статус пробы"
  }];
  string message = 2;
}

enum Status {
  UNAVAILABLE = 0;
  OK = 1;
}
